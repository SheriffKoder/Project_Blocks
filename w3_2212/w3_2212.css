

/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* floor card */

.main {

    height: 200px;
    width: 200px;
    border-radius: 32px;
    background-color: lightskyblue;

    display: flex;
    justify-content: center;
    align-items: center;

    position: relative;
    left: 100px;

}

.floorcard {

    transform-style: preserve-3d;
    transform: rotateX(51deg) rotateZ(43deg);

    box-shadow: 
    1px 1px 0 1px #f9f9fb,               /*border shadow*/
    -1px 0 28px 0 rgba(34,33,81,0.01),  /*upper shadow*/
    28px 28px 28px 0 rgba(34,33,81,0.25) /*lower shadow*/
    ;

    transition: .4s ease-in-out transform, .4s ease-in-out box-shadow;

}

.floorcard:hover {


    transform: 
    translate3d(0px, -16px, 0px)        /*translate y by -ve */
    rotateX(51deg) rotateZ(43deg);

    box-shadow: 
    1px 1px 0 1px #f9f9fb,
    -1px 0 28px 0 rgba(34,33,81,0.01),
    54px 54px 28px -10px rgba(34,33,81,0.25) /*key: -10px blur */

    ;

}



/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* layered card */


.layeredcard {

    transform-style: preserve-3d;

    transform: 
    scale(0.75)
    rotateY(-30deg)
    rotateX(45deg)
    translateZ(4.5rem)
    ;

    transform-origin: 50% 100%;
    
    box-shadow: 1rem 1rem 2rem rgba(0,0,0,0.25);

    transition: 0.6s ease transform;
}


.layeredcard:hover {

    transform: scale(1);

}


        .layeredcard::before {
            content: "";

            position: absolute;

            height: 198px;
            width: 198px;
            border-radius: 32px;
            background-color: none;
            border: 1px solid rgb(155, 178, 200);

            transform: translateZ(4rem);    /**/
            transition: 0.6s ease transform;

        

        }

        .layeredcard:hover::before {
            transform: translateZ(0rem);    /**/
        }


        .layeredcard::after {
            content: "";

            position: absolute;

            height: 197px;
            width: 197px;
            border-radius: 32px;
            background-color: lightslategray;
            border: 1px solid wheat;

            transform: translateZ(-4rem);    /**/
            transition: 0.6s ease transform;

        

        }

        .layeredcard:hover::after {
            transform: translateZ(-1rem);    /**/
        }



/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* 3d-transforms */

/*to activate 3d space, an element needs perspective(1)
perspective = vanishing point

for all elements to have the same vanishing point, rotates with camera
use the perspective on the parent element

but on each separate element, all will be aligned with itself
more control


perspective determines the intensity 
2000px very far
100px like an insect viewing a massive object

---------------------------------------------

vanishing point is set to center by default 
change position of vanishing point with
perspective-origin (2) 

X 0(left 0) - 100%(right 0)
Y 0 (looking from above) 100% (looking from below)

backface visible (3)
(4) rotate (the X or Y are fixed and rotate around it)
translate: position along the 3d space x,y,z
translate3d can have positive impact on performance

(5) transform-style: preserve-3d;
/*for its children to inherit the applied perspective from the scene 
and live in the same 3d space */



*/
.testdiv_0912 {

    transform: perspective(400px) rotateY(45deg);   
    /*that is enough to rotate card*/
    /*or*/
    /*perspective: 400px*/

}


.scene0912 {
    width: 200px;
    height: 200px;
    border: 1px solid #CCC;
    margin: 40px;
    perspective: 400px;

  }
  
  .panel {
    width: 55px;
    height: 55px;
    float: left;
    margin: 5px;
    background: red;
    transform: perspective(400px) rotateY(45deg);
    /*transform: rotateY(45deg);*/
    perspective-origin: 25% 75%;

  }

  /*////////////////////////////////////////////////////////////////////*/

  /*
  scene perspective
  card_cont stretched and given transform 3d for its children
  card_cont will be rotated on hover

  cards will be both absolute and stretched (on top each other)
  no backface

  card2 will be rotated 180 so when the card_cont rotate it rotates total 360



  */


  .scene {
    width: 200px;
    height: 200px;



    perspective: 600px;
  }

  .card {
    width: 100%;
    height: 100%;
    position: relative;
    transition: transform 1s;



    transform-style: preserve-3d;
    /*for its children to inherit the applied perspective from the scene 
    and live in the same 3d space */

/*    transform-origin: 100% 10%; /*the x made a flipbook effect*/
transform-origin: center right; /*flipbook effect*/

  }


  .card_face {
    position: absolute; /*reset their positions in 2D*/
    height: 100%;
    width: 100%;


    backface-visibility: hidden;
  }

  .card_face_front {
    background: red;
  }

  .card_face_back {
    background: blue;
    transform: rotateY(180deg);
  }

  .card:hover {
    transform: translateX(-100%) rotateY(180deg);
    /* translateX here is a weather app effect */

  }