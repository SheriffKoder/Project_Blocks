
/* remaking kp_cubes again */

:root {
    --box-Color: #0ff7;

}

body {

    background-color: black;
    min-height: 100vh;

    display: flex;
    justify-content: center;
    align-items: center;


}






/*/////////////////////////////////////////////////////*/

.scene {
    position: relative;

    font-size: 100px;
}

.floor {

    height: 4em;
    width: 4em;
    background: rgb(61, 61, 61);


    position: absolute;
    transform: translate(-50%, -50%);

    top: 1em;

}

.cube {

    width: 2em;
    height: 2em;
    background-color: var(--box-Color);

    position: absolute;

    /*
    left: -100px;
    top: -100px;
*/

}


.ball {
    width: .5em;
    height: .5em;

    background-color: white;
    position: absolute;
    border-radius: 50%;
    /*top: -1.5em; */
    left: -25px;
}


/*/////////////////////////////////////////////////////*/
/*/////////////////////////////////////////////////////*/
/* the view */

.window { /*camera*/
    perspective: 700px;
    perspective-origin: 50% -15em;


}


.scene {    /* contains/rotate all items together */

    transform-style: preserve-3d;

    animation: sceneRotate 10s 0 linear;

}

.scene:hover {
    animation: sceneRotate 10s infinite linear;
    animation-delay: 0 ;

}



@keyframes sceneRotate {
    to { transform: rotateY(-360deg); }
    
}



.floor {

    transform: translate(-50%, -50%) rotateX(90deg);
    /*transition: all 1s linear;*/
}

/*
.floor:hover {
    transform: translate(-50%, -50%) rotateX(20deg);

}
*/

/* till here card */
/*/////////////////////////////////////////////////////*/

/* so if any rotation put preserve, 
window > perspective 
container > main rotate, preserve
item > preserve rotate 

font: 100px
and work on em's relation 1em, 4em, etc.

*/

/*/////////////////////////////////////////////////////*/
/*/////////////////////////////////////////////////////*/
/* positioning sides */


.cube {
    transform-style: preserve-3d;
    transform: rotateX(0deg);

}

.left, .right, .front, .back, .bottom {

    background: var(--box-Color);

    position: absolute;
    height: 100%;
    width: 100%;

}

.front {

    transform: rotateY(0deg) translateZ(1em);
    border: 1px solid black;

}

.back {

    transform: rotateY(0deg) translateZ(-1em);
    border: 1px solid black;

}

.left {

    transform: rotateY(90deg) translateZ(-1em);
    border: 1px solid black;

}

.right {

    transform: rotateY(-90deg) translateZ(-1em);
    border: 1px solid black;

}

.top {
    position: absolute;
    width: 2em;  /* to keep its width while cube moving */
    height: 2em;
    background: var(--box-Color);
    transform: translateY(-50%) rotateX(90deg);

}

.bottom {
    position: absolute;
    width: 2em;  /* to keep its width while cube moving */
    height: 2em;
    background: rgba(255, 255, 255, 0.495);
    transform: translateY(50%) rotateX(90deg);

    bottom: 0;
}

.cube {
    background: none;
}


/*/////////////////////////////////////////////////////*/
/*/////////////////////////////////////////////////////*/
/* adding shadows */

.floor {

    background-image: 
    radial-gradient(rgba(255, 255, 255, 0.1), rgba(24,24,24,1) 80% );
    /* white and black(takes 75% from out)*/
}


.left, .right, .front, .back, .top {

    box-shadow: 0 0 0.5em #000a inset;
}

.bottom {

    box-shadow: 0 0 1em rgba(0, 0, 0, 0.27);
    
}


/*/////////////////////////////////////////////////////*/
/*/////////////////////////////////////////////////////*/
/* the ball shadowing, underlying shadow, keep to front with rotation */


/*color in, color out 75%) 
color out having total % of *

/*circle at top, color, %, color ) 
color %break color*/


.ball {
    background-image: radial-gradient(circle at top, lightblue, 50%, #000);
}


/* adding a layer on top-div to give space and background*/

.ballShadow {

    position: absolute;
    width: 100%; height: 100%;
    background: radial-gradient( rgba(0, 0, 0, 0.734), rgba(0, 0, 0, 0) 50%);

}


.ball {
    animation: ballRotate 10s infinite linear reverse;

}

@keyframes ballRotate {
    to { transform: rotateY(-360deg); }

}




/*/////////////////////////////////////////////////////*/
/*/////////////////////////////////////////////////////*/
/* ball bouncing animation */

.ball {
    animation: 
    ballRotate 10s infinite linear reverse,
    ballBounce 1.5s infinite ease-out;

}


@keyframes ballBounce {
    0%, 100% {    bottom: 0.5em; } /*ball drop for collision effect */
    50% {  bottom: 2.5em; animation-timing-function: ease-in;}
    
}
*/

/* ball shadow animation */

.ballShadow {

    animation: ballShadow 1.5s infinite ease-out;

}

@keyframes ballShadow {
    0%,8%, 93.5%,100% {transform: scale(1); opacity: 1;}
    50% {transform: scale(1.5); opacity: 0.5; animation-timing-function: ease-in;}
}



/*/////////////////////////////////////////////////////*/
/* collision effect animation */
/*adjusted the top/bottom from original css*/


.cube {
    animation: cubeHeight 1.5s infinite linear;
    bottom: -1em;
    left: -1em;
}


@keyframes cubeHeight {
    0%, 100% {height: 1.5em}
    8%, 93.5% {height: 2em; animation-timing-function: ease-in;}
    
}


/*fix ball shadow to work*/